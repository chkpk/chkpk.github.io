<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记录</title>
    <description>如有任何指正或疑问，欢迎联系我。 Thanks github.
</description>
    <link>http://chkpk.github.io/</link>
    <atom:link href="http://chkpk.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 Mar 2015 22:46:54 +0800</pubDate>
    <lastBuildDate>Thu, 26 Mar 2015 22:46:54 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>mysql async connector</title>
        <description>&lt;p&gt;所做的项目有个需求，有一个线程接收Udp请求然后向mysql的一个表插入一行记录.由于不希望该功能过多占用CPU，因此只用一个线程。
一开始用mysql-connector-c++作为客户端，由于只有单线程，插入速度不如人意。
主要是原因是网络延迟太大，线程大部分时间阻塞在等待数据库返回数据，于是考虑用异步的方式访问数据库。&lt;/p&gt;

&lt;p&gt;目前mysql官方只有C#版本的connector有async操作的支持, mysql-connector-c/c++ 都没有提供异步操作的API.
但mariadb-connector-c提供了&lt;code&gt;兼容mysql&lt;/code&gt;的&lt;a href=&quot;https://mariadb.com/kb/en/mariadb/non-blocking-client-library/&quot;&gt;non-block API&lt;/a&gt;。
(该网页提到mysql-connector-c早就支持non-blocking,但没看出来怎么用，也找不到任何示例..)。&lt;/p&gt;

&lt;p&gt;mariadb提供了一个使用&lt;a href=&quot;https://github.com/MariaDB/server/blob/10.1/tests/async_queries.c&quot;&gt;异步API的demo&lt;/a&gt;,里面结合了libevent,最主要的部分是异步操作状态机的实现，看着比较费解，
我重新改写了，放在&lt;a href=&quot;https://github.com/chkpk/mysql-async-example/blob/master/mysql_async_example.c&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;以下是一些测试结果(被插入记录的表使用InnoDB存储引擎;mysql数据库在同一台主机上;测试代码见 &lt;a href=&quot;https://github.com/chkpk/mysql-async-example/blob/master/mysql_async_example.c&quot;&gt;blocking&lt;/a&gt;,&lt;a href=&quot;https://github.com/chkpk/mysql-async-example/blob/master/mysql_example.c&quot;&gt;non-blocking&lt;/a&gt;):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;记录数&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;阻塞式&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;非阻塞式&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;时间比&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.031&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.029&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.011&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.624&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;328.636&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;67.098&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中非阻塞式用了10个mysql连接。连接数增加时，耗时更少，几乎成反比,直到到达数据库处理能力的极限，这时候再增加连接数就没有意义了。&lt;/p&gt;

&lt;p&gt;使用非阻塞式确实能够加快数据库操作，但很显然non-blocking 显著增加了代码的复杂性，特别是对于一些查询类操作，如果使用非阻塞操作的话，势必要维护每一个数据库请求的上下文数据。 事实上可以通过增加线程数来解决这个问题，未必要使用non-blocking的API。
 mariadb官网文档认为有以下使用场合：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;需要获取多个数据库的数据以进行下一步操作，用异步API可以使这些数据库请求并行化。&lt;/li&gt;
  &lt;li&gt;原有的代码使用了libevent等非阻塞式的框架&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于同一个连接无法同时处理两个查询，因此不管是阻塞还是非阻塞，连接数增加才有可能提高TPS。 
回到我开始提到的项目需求来说，由于我只是插入记录，而且几乎不会有插入失败的情形，因此几乎不用维护上下文,可以使用这种异步的方式来操作数据库。&lt;/p&gt;

&lt;p&gt;使用过程中发现mariadb-connect-c中，mysql连接关闭时没有清理使用异步mysql而额外申请的内存，顺便提了个pull request。&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://chkpk.github.io/2015/03/26/mysql-async-connector.html</link>
        <guid isPermaLink="true">http://chkpk.github.io/2015/03/26/mysql-async-connector.html</guid>
        
        <category>Database</category>
        
        <category>Mysql</category>
        
        <category>C/C++</category>
        
        
      </item>
    
      <item>
        <title>mysql_store_result vs mysql_use_result</title>
        <description>&lt;p&gt;在使用&lt;code&gt;mysql_query&lt;/code&gt;进行查询之后,必须调用 &lt;code&gt;mysql_store_result&lt;/code&gt;或者&lt;code&gt;mysql_use_result&lt;/code&gt;获取结果。
前者立即将剩余所有查询结果取回(可能会阻塞），后者不产生任何网络IO，从不阻塞,剩余查询结果将在后面&lt;code&gt;mysql_fetch_row&lt;/code&gt;需要时返回。
事实上除非查询结果集很大（实测约大于160k）,否则基本在&lt;code&gt;musql_query&lt;/code&gt;执行完之后已经全部返回了（&lt;code&gt;仍在系统的socket缓冲区，等待mysql_store_result 取走&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;wireshark抓包结果：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mysql_store_result&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mysql_real_connect():
    &lt;ul&gt;
      &lt;li&gt;建立TCP连接&lt;/li&gt;
      &lt;li&gt;server -&amp;gt; client : Server Greating&lt;/li&gt;
      &lt;li&gt;client -&amp;gt; server : Login Request&lt;/li&gt;
      &lt;li&gt;server -&amp;gt; client : Response OK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql_query() :
    &lt;ul&gt;
      &lt;li&gt;client -&amp;gt; server : Request Query&lt;/li&gt;
      &lt;li&gt;server -&amp;gt; client : Response  //包含部分查询的结果&lt;/li&gt;
      &lt;li&gt;client -&amp;gt; server : TCP zero-window // 客户端接收缓存已满&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql_store_result():  //可能阻塞
    &lt;ul&gt;
      &lt;li&gt;client -&amp;gt; server : non-zero-window  //立即取走缓冲区数据，tcp连接的window恢复为非零&lt;/li&gt;
      &lt;li&gt;server -&amp;gt; client : Response  //包含所有剩余查询的结果(如果还有的话）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql_fetch_now(): // 非阻塞
    &lt;ul&gt;
      &lt;li&gt;无。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;musql_close():
    &lt;ul&gt;
      &lt;li&gt;client -&amp;gt; server : Request Quit&lt;/li&gt;
      &lt;li&gt;tcp断开&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;mysql_use_result&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mysql_real_connect():
    &lt;ul&gt;
      &lt;li&gt;建立TCP连接&lt;/li&gt;
      &lt;li&gt;server -&amp;gt; client : Server Greating&lt;/li&gt;
      &lt;li&gt;client -&amp;gt; server : Login Request&lt;/li&gt;
      &lt;li&gt;server -&amp;gt; client : Response OK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql_query() :
    &lt;ul&gt;
      &lt;li&gt;client -&amp;gt; server : Request Query&lt;/li&gt;
      &lt;li&gt;server -&amp;gt; client : Response  //包含部分查询的结果&lt;/li&gt;
      &lt;li&gt;client -&amp;gt; server : TCP zero-window&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql_use_result():// 非阻塞
    &lt;ul&gt;
      &lt;li&gt;无。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql_fetch_now(): // 可能阻塞
    &lt;ul&gt;
      &lt;li&gt;一开始fetch处理 mysql_query 返回的结果，此时无网络IO，之后：&lt;/li&gt;
      &lt;li&gt;client -&amp;gt; server : non-zero-window  //client取走缓冲区数据，tcp连接的window恢复为非零&lt;/li&gt;
      &lt;li&gt;server -&amp;gt; client : Response  //包含所有剩余查询的结果(如果还有的话）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;musql_close():
    &lt;ul&gt;
      &lt;li&gt;client -&amp;gt; server : Request Quit&lt;/li&gt;
      &lt;li&gt;tcp断开&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 23 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://chkpk.github.io/2015/03/23/mysql_use_result-vs-mysql_store_result.html</link>
        <guid isPermaLink="true">http://chkpk.github.io/2015/03/23/mysql_use_result-vs-mysql_store_result.html</guid>
        
        <category>Database</category>
        
        <category>Mysql</category>
        
        <category>C/C++</category>
        
        
      </item>
    
      <item>
        <title>mutex,spinlock,cas performance</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/shines77/p/4200127.html&quot;&gt;《一个无锁消息队列引发的血案》&lt;/a&gt; 提到了多个版本的线程安全的RingQueue, 我把&lt;a href=&quot;https://github.com/shines77/RingQueue-utf8&quot;&gt;原作者放在github上的代码&lt;/a&gt;整理了下， 写了一个&lt;a href=&quot;https://github.com/chkpk/RingQueue/blob/master/RingQueue.h&quot;&gt;单文件版本&lt;/a&gt; (有所简化，只支持linux)，先上测试结果(&lt;a href=&quot;https://github.com/chkpk/RingQueue/blob/master/main.cpp&quot;&gt;测试代码&lt;/a&gt;)：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;nThread&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;mutex&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;spin1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;spin2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;cas&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;mixed1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;mixed2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3680&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4158&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2444&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2590&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;365&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;461&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4469&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4589&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3604&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3022&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;398&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;432&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3523&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5437&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4764&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3742&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;391&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;410&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2845&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5600&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5952&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5574&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;399&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;402&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2600&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7108&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7562&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;38151&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;394&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;401&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2626&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7950&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9243&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Na&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;418&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;408&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2593&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9206&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10671&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Na&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;413&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;415&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2576&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10320&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12608&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Na&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;408&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;428&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2611&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11225&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;14091&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Na&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;404&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;420&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2618&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12143&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15835&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Na&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;407&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;428&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;每次测试的push/pop总次数为10000000, 记录完成的时间,时间单位为ms。运行6次,取平均值。&lt;/li&gt;
  &lt;li&gt;测试环境： CentOS 6.6 (64bit), Kernel 2.6.32,  CPU: Inter(R) Xeon E5606 @ 2.13GHz(8核), Memory 8G。&lt;/li&gt;
  &lt;li&gt;编译器版本 4.9.1, O3 优化。&lt;/li&gt;
  &lt;li&gt;横轴nThread=消费者数目=生产者数目。 Na表示运行时间太长，没有计入比较。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/lock_compare.jpg&quot; alt=&quot;性能对比图&quot; title=&quot;对比图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;各种同步实现方式&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mutex : 使用 &lt;code&gt;pthread_mutex_lock / pthread_mutex_unlock&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;spin1 : 使用 &lt;code&gt;pthread_spin_lock / pthread_spin_unlock&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;spin2 : 使用 &lt;code&gt;__sync_lock_test_and_set / __sync_lock_release&lt;/code&gt;, 对应&lt;a href=&quot;https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_mq.c&quot;&gt;skynet_mq.c&lt;/a&gt;,自旋锁另一种实现形式&lt;/li&gt;
  &lt;li&gt;cas : 使用 &lt;code&gt;__sync_bool_compare_and_swap&lt;/code&gt;, 对应原文的q3_new.h&lt;/li&gt;
  &lt;li&gt;mixed1 : 混合使用 &lt;code&gt;__sync_bool_compare_and_swqp / __mm_pause / sleep / sched_yield&lt;/code&gt;, 对应原文的spin2_push/spin2_pop&lt;/li&gt;
  &lt;li&gt;mixed2 : 改写自mixed1，有所简化。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code&gt;具体代码见&lt;/code&gt;&lt;/strong&gt;&lt;a href=&quot;https://github.com/chkpk/RingQueue/blob/master/RingQueue.h&quot;&gt;RingQueue.h&lt;/a&gt;_;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;mutex是最常用的线程间同步方法，一般认为拿不到锁就睡眠(实际似乎并非如此?）&lt;/li&gt;
  &lt;li&gt;spin1/spin1都是自旋锁,cas实现了所谓的&lt;code&gt;&quot;无锁队列&quot;&lt;/code&gt;,三者在拿不到锁时都死等。区别在于 cas是乐观锁。&lt;/li&gt;
  &lt;li&gt;mixed1/mixed2 拿不到锁时先自旋一段时间，还拿不到就退让,直到获取锁。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;测试结果&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当竞争不激烈（总线程数小于等于主机核心数)时，mutex、自旋锁、cas的性能相差不大&lt;/li&gt;
  &lt;li&gt;当总线程数大于主机核心数时，cas性能迅速恶化;两种自旋锁性能基本一样，随线程数增多而逐渐变差; mutex较稳定,&lt;/li&gt;
  &lt;li&gt;两个混合型的mixed1和mixed2性能相近，至少是mutex的3倍,而且一直很稳定;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;对测试结果的分析与猜测&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cas性能迅速恶化：随线程数增加，cas冲突越来越激烈，尤其在并发线程数大于核数的时候.cas更容易在以下两处代码执行前或者执行过程中被抢占或者被休眠，导致其它线程因为 write_finish_以及read_finished_更新不及时而则停在这个while循环内(经测试while循环次数大幅增加)：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_finish_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_mm_pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_finish_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_mm_pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;线程数大于核数时，由于mixed1和mixed2有sched_yield()/nanosleep()机制,会在前面自旋若干次数之后，主动放弃CPU进行退让，获取了较好的实际性能。&lt;/li&gt;
  &lt;li&gt;竞争不激烈时，spin性能按理应该比mutex性能好(spin上下文切换少)，但测试结果却相反。原来在较新的mutex实现中，使用了futex(fast userspace mutex), 其策略也是先在用户空间自旋，一段时间后仍未获取锁才由系统仲裁。详见&lt;a href=&quot;http://www.searchtb.com/2011/01/pthreads-mutex-vs-pthread-spinlock.html&quot;&gt;pthreads-mutex-vs-pthread-spinlock&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mutex适应性最强，而且性能也不差,所以优先考虑用mutex,起码代码简单、可读性高&lt;/li&gt;
  &lt;li&gt;性能瓶颈真的在mutex时,再考虑用无锁或者其他锁来优化,但要意识到，优化的空间是有限的,可能更好的办法是改架构。&lt;/li&gt;
  &lt;li&gt;无锁队列没有想象中那么美…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;待进一步研究&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;降低锁的粒度,分为读锁、写锁&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 18 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://chkpk.github.io/2015/03/18/mutex-spin-cas-mixed-compare.html</link>
        <guid isPermaLink="true">http://chkpk.github.io/2015/03/18/mutex-spin-cas-mixed-compare.html</guid>
        
        <category>Algorithm</category>
        
        <category>Linux</category>
        
        <category>C/C++</category>
        
        
      </item>
    
      <item>
        <title>3d topo layout</title>
        <description>&lt;p&gt;已知无向连通拓图（G,E)，给G的每个元素计算出一个3维坐标，达到以下目标：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;有无向边连接的节点在3维空间中尽量靠近&lt;/li&gt;
  &lt;li&gt;所有节点在空间中分布尽量均匀&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大部分算法是基于重力-引力模型，通过不断迭代得到每个节点的坐标。最大问题是迭代时间长。&lt;/p&gt;

&lt;p&gt;看了很多文献，有一个算法比较特别，时间复杂度可认为是&lt;code&gt;O(n)&lt;/code&gt;.
详见 &lt;a href=&quot;http://www.emis.de/journals/JGAA/accepted/2004/HarelKoren2004.8.2.pdf&quot;&gt;《Graph Drawing by High-Dimensional Embedding》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;算法整体描述：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在G中选出若干节点，称“核心节点”，其集合为“核心节点集合”，记为C，设C的大小为N&lt;/li&gt;
  &lt;li&gt;对每个核心节点，以之为根，广度优先遍历G，得到G中每个节点到各个核心节点的跳数（共N个），组成该节点的N维空间坐标向量&lt;/li&gt;
  &lt;li&gt;运用主成分分析法（PCA）将每个节点的坐标向量从N维降为3维，得到每个节点的3维坐标&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坐标节点的选取：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;选取连接数最多的节点u1作为第1个核心节点，加入C&lt;/li&gt;
  &lt;li&gt;对G-C中的节点u，定义u到C的距离为u到C中已有节点的距离的最小值&lt;/li&gt;
  &lt;li&gt;将当前G-C中与C距离最远的节点作为下一个核心节点加入C，更新G-C所有节点到C的距离&lt;/li&gt;
  &lt;li&gt;将3重复N-1次，一共得到N个核心节点. N大小取50足够.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;主成分分析法降维过程中也用了迭代，不过经实际运行发现迭代次数较少。&lt;/p&gt;

&lt;p&gt;算法实现起来不难， C代码大概400行。 上万节点的拓扑图，运行时间基本在5秒以内。
效果见&lt;a href=&quot;/3d_topo_layout/3d_topo_layout_demo.html&quot;&gt;3d_topo_layout_demo&lt;/a&gt;。 用了WebGl来画的3D拓扑图。为了便于显示效果，节点只有300个。&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Mar 2015 23:18:00 +0800</pubDate>
        <link>http://chkpk.github.io/2015/03/17/3d-topo-layout.html</link>
        <guid isPermaLink="true">http://chkpk.github.io/2015/03/17/3d-topo-layout.html</guid>
        
        <category>Graphics</category>
        
        <category>Algorithm</category>
        
        <category>WebGl</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Mar 2015 19:18:50 +0800</pubDate>
        <link>http://chkpk.github.io/jekyll/update/2015/03/17/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://chkpk.github.io/jekyll/update/2015/03/17/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
